[
  {
    "id": "tailwind",
    "name": "Tailwind CSS",
    "description": "A utility-first CSS framework for rapid UI development",
    "version": "3.3.2",
    "category": "styling",
    "dependencies": [],
    "incompatible_with": [],
    "installation": {
      "commands": [
        "npm install -D tailwindcss postcss autoprefixer",
        "npx tailwindcss init -p"
      ],
      "file_operations": [
        {
          "operation": "create",
          "path": "src/styles/globals.css",
          "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;"
        },
        {
          "operation": "modify",
          "path": "tailwind.config.js",
          "pattern": "content: \\[\\],",
          "replacement": "content: [\n    './src/**/*.{js,ts,jsx,tsx}',\n  ],"
        },
        {
          "operation": "modify_import",
          "path": "src/app/layout.tsx",
          "action": "add",
          "import": "../styles/globals.css"
        }
      ]
    },
    "configuration": {
      "options": [
        {
          "id": "jit",
          "type": "boolean",
          "label": "Just-in-Time Mode",
          "description": "Enable JIT compilation mode for faster development",
          "default": true
        },
        {
          "id": "content_paths",
          "type": "string",
          "label": "Content Paths",
          "description": "Paths to your template files",
          "default": "./src/**/*.{js,ts,jsx,tsx}"
        }
      ]
    }
  },
  {
    "id": "daisyui",
    "name": "DaisyUI",
    "description": "Component library for Tailwind CSS",
    "version": "3.1.0",
    "category": "ui",
    "dependencies": ["tailwind"],
    "incompatible_with": [],
    "installation": {
      "commands": [
        "npm install daisyui@latest"
      ],
      "file_operations": [
        {
          "operation": "modify",
          "path": "tailwind.config.js",
          "pattern": "plugins: \\[",
          "replacement": "plugins: [\n    require('daisyui'),"
        }
      ]
    },
    "configuration": {
      "options": [
        {
          "id": "themes",
          "type": "multiselect",
          "label": "Themes",
          "description": "DaisyUI themes to include",
          "default": ["light", "dark"],
          "choices": [
            {"value": "light", "label": "Light"},
            {"value": "dark", "label": "Dark"},
            {"value": "cupcake", "label": "Cupcake"},
            {"value": "bumblebee", "label": "Bumblebee"},
            {"value": "emerald", "label": "Emerald"},
            {"value": "corporate", "label": "Corporate"},
            {"value": "synthwave", "label": "Synthwave"},
            {"value": "retro", "label": "Retro"},
            {"value": "cyberpunk", "label": "Cyberpunk"},
            {"value": "valentine", "label": "Valentine"}
          ]
        }
      ]
    }
  },
  {
    "id": "zustand",
    "name": "Zustand",
    "description": "Small, fast and scalable state-management solution",
    "version": "4.3.8",
    "category": "state",
    "dependencies": [],
    "incompatible_with": [],
    "installation": {
      "commands": [
        "npm install zustand"
      ],
      "file_operations": [
        {
          "operation": "create",
          "path": "src/lib/store/index.ts",
          "content": "import { create } from 'zustand';\n\ninterface AppState {\n  count: number;\n  increment: () => void;\n  decrement: () => void;\n}\n\nexport const useStore = create<AppState>((set) => ({\n  count: 0,\n  increment: () => set((state) => ({ count: state.count + 1 })),\n  decrement: () => set((state) => ({ count: state.count - 1 })),\n}));"
        }
      ]
    },
    "configuration": {
      "options": [
        {
          "id": "persist",
          "type": "boolean",
          "label": "Add Persistence",
          "description": "Add persistence middleware to Zustand",
          "default": false
        }
      ]
    }
  },
  {
    "id": "i18n",
    "name": "Next.js Internationalization",
    "description": "Adds internationalization support to Next.js",
    "version": "1.0.0",
    "category": "i18n",
    "dependencies": [],
    "incompatible_with": [],
    "installation": {
      "commands": [
        "npm install next-intl"
      ],
      "file_operations": [
        {
          "operation": "create",
          "path": "src/messages/en.json",
          "content": "{\n  \"app\": {\n    \"title\": \"My Application\",\n    \"description\": \"This is my awesome application\"\n  },\n  \"nav\": {\n    \"home\": \"Home\",\n    \"about\": \"About\",\n    \"contact\": \"Contact\"\n  }\n}"
        },
        {
          "operation": "create",
          "path": "src/messages/fr.json",
          "content": "{\n  \"app\": {\n    \"title\": \"Mon Application\",\n    \"description\": \"C'est mon application géniale\"\n  },\n  \"nav\": {\n    \"home\": \"Accueil\",\n    \"about\": \"À propos\",\n    \"contact\": \"Contact\"\n  }\n}"
        },
        {
          "operation": "create",
          "path": "src/lib/i18n.ts",
          "content": "import {notFound} from 'next/navigation';\nimport {getRequestConfig} from 'next-intl/server';\n\nconst locales = ['en', 'fr'];\n\nexport default getRequestConfig(async ({locale}) => {\n  if (!locales.includes(locale as any)) notFound();\n\n  return {\n    messages: (await import(`../messages/${locale}.json`)).default\n  };\n});"
        },
        {
          "operation": "create",
          "path": "src/middleware.ts",
          "content": "import createMiddleware from 'next-intl/middleware';\n\nexport default createMiddleware({\n  locales: ['en', 'fr'],\n  defaultLocale: 'en'\n});\n\nexport const config = {\n  matcher: ['/((?!api|_next|.*\\\\..*).*)'],\n};"
        }
      ]
    },
    "configuration": {
      "options": [
        {
          "id": "locales",
          "type": "multiselect",
          "label": "Locales",
          "description": "Languages to support",
          "default": ["en", "fr"],
          "choices": [
            {"value": "en", "label": "English"},
            {"value": "fr", "label": "French"},
            {"value": "es", "label": "Spanish"},
            {"value": "de", "label": "German"},
            {"value": "ja", "label": "Japanese"},
            {"value": "pt", "label": "Portuguese"}
          ]
        }
      ]
    }
  },
  {
    "id": "forms",
    "name": "React Hook Form",
    "description": "Performant, flexible and extensible forms with easy-to-use validation",
    "version": "7.45.1",
    "category": "forms",
    "dependencies": [],
    "incompatible_with": [],
    "installation": {
      "commands": [
        "npm install react-hook-form zod @hookform/resolvers"
      ],
      "file_operations": [
        {
          "operation": "create",
          "path": "src/lib/hooks/useForm.ts",
          "content": "import { useForm as useHookForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\n\nexport const useForm = <T extends z.ZodType>(schema: T) => {\n  return useHookForm({\n    resolver: zodResolver(schema),\n  });\n};"
        },
        {
          "operation": "create",
          "path": "src/components/ui/Form.tsx",
          "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\";\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n);\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={className} {...props} />\n    </FormItemContext.Provider>\n  );\n});\nFormItem.displayName = \"FormItem\";\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField();\n\n  return (\n    <label\n      ref={ref}\n      className={className}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n});\nFormLabel.displayName = \"FormLabel\";\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField();\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  );\n});\nFormControl.displayName = \"FormControl\";\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={className}\n      {...props}\n    />\n  );\n});\nFormDescription.displayName = \"FormDescription\";\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField();\n  const body = error ? String(error?.message) : children;\n\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={className}\n      {...props}\n    >\n      {body}\n    </p>\n  );\n});\nFormMessage.displayName = \"FormMessage\";\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n};"
        }
      ]
    },
    "configuration": {
      "options": [
        {
          "id": "validation",
          "type": "select",
          "label": "Validation Library",
          "description": "Library to use for form validation",
          "default": "zod",
          "choices": [
            {"value": "zod", "label": "Zod"},
            {"value": "yup", "label": "Yup"},
            {"value": "joi", "label": "Joi"}
          ]
        }
      ]
    }
  },
  {
    "id": "auth",
    "name": "NextAuth.js",
    "description": "Authentication for Next.js",
    "version": "4.22.1",
    "category": "auth",
    "dependencies": [],
    "incompatible_with": [],
    "installation": {
      "commands": [
        "npm install next-auth"
      ],
      "file_operations": [
        {
          "operation": "create",
          "path": "src/app/api/auth/[...nextauth]/route.ts",
          "content": "import NextAuth from \"next-auth\";\nimport type { NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        // This is where you would typically query your database\n        // to validate the credentials\n        if (credentials?.email === \"user@example.com\" && credentials?.password === \"password\") {\n          return { id: \"1\", name: \"User\", email: \"user@example.com\" };\n        }\n        return null;\n      }\n    })\n  ],\n  pages: {\n    signIn: \"/auth/signin\",\n    signOut: \"/auth/signout\",\n    error: \"/auth/error\",\n    verifyRequest: \"/auth/verify-request\",\n    newUser: \"/auth/new-user\"\n  },\n  session: {\n    strategy: \"jwt\"\n  },\n  callbacks: {\n    async session({ session, token }) {\n      return session;\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    }\n  }\n};\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };"
        },
        {
          "operation": "create",
          "path": "src/components/auth/SignInForm.tsx",
          "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { signIn } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\n\nexport default function SignInForm() {\n  const router = useRouter();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email,\n        password,\n      });\n\n      if (result?.error) {\n        setError(result.error);\n      } else {\n        router.push(\"/\");\n        router.refresh();\n      }\n    } catch (error) {\n      setError(\"An unexpected error occurred. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-md w-full mx-auto p-6 bg-white rounded-lg shadow-md\">\n      <h2 className=\"text-2xl font-bold mb-6 text-center\">Sign In</h2>\n      \n      {error && (\n        <div className=\"mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded\">\n          {error}\n        </div>\n      )}\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-4\">\n          <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Email\n          </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            className=\"w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            required\n          />\n        </div>\n        \n        <div className=\"mb-6\">\n          <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Password\n          </label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            required\n          />\n        </div>\n        \n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          className=\"w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 disabled:opacity-50\"\n        >\n          {isLoading ? \"Signing in...\" : \"Sign In\"}\n        </button>\n      </form>\n    </div>\n  );\n}"
        }
      ]
    },
    "configuration": {
      "options": [
        {
          "id": "providers",
          "type": "multiselect",
          "label": "Auth Providers",
          "description": "Authentication providers to include",
          "default": ["credentials"],
          "choices": [
            {"value": "credentials", "label": "Credentials"},
            {"value": "google", "label": "Google"},
            {"value": "github", "label": "GitHub"},
            {"value": "apple", "label": "Apple"},
            {"value": "facebook", "label": "Facebook"},
            {"value": "twitter", "label": "Twitter"}
          ]
        }
      ]
    }
  }
] 